#!/usr/bin/env python3

# https://financialdataexchange.org/common/Uploaded%20files/OFX%20files/OFX%20Banking%20Specification%20v2.3.pdf
# 11.13.1.1.2 Bank Message Set Response Messages
# 11.13.1     Example: Statement Download

# ??? Does MACU have an api token so I can automate downloading my ofx files?

from ofxtools.Parser import OFXTree
#from pprint import pprint

#-----------------------------------------------------------------------------
# AIDER
#
# * When creating or working on an existing function, the following
#   requirements must be included in the work.
#   + The function should be immediately preceded by a comment of dashed lines
#     to column 78.
#   + The function should have an up-to-date docstring that includes a short
#     discussion of what the function does, a minimal number of examples, its
#     expected inputs and its outputs.
# * Any changes made to the file must be broken out into as small a change
#   commit as makes sense for the change. E.g., changes should be kept to
#   a single function per commit, documentation changes should be a separate
#   commit, etc.

class OFX2Ledger:
    """
    A class to parse an OFX file and provide unique values for a given key.

    This class takes a filename as an argument, parses the OFX file, and saves
    the parsed output to self.ofx. It provides a method to get a list of unique
    values for a given key in the OFX object.

    Attributes:
        ofx (OFX): The parsed and converted OFX object.
    """

    def __init__(self, ofx_file):
        """
        Initialize the OFX2Ledger object.

        This method attempts to parse the given OFX file and convert it to an
        OFX object. If the parsing or conversion fails, it will raise an exception
        with an appropriate error message and the exception details.

        Args:
            ofx_file (str): The path to the OFX file to parse.
        """
        try:
            # Parse the OFX file
            parser = OFXTree()
            parser.parse(ofx_file)

            # Convert the tree to an OFX object
            self.ofx = parser.convert()

            if not self.ofx.bankmsgsrsv1:
                raise ValueError("DEBUG: Expected to find BANKMSGSRSV1 but it's not there.")

        except ValueError as ve:
            raise ValueError(f"Failed to parse OFX file: {ofx_file}. Exception: {ve}")

        except Exception as e:
            raise Exception(f"Failed to parse OFX file: {ofx_file}. Exception: {e}")

    #-------------------------------------------------------------------------
    def get_unique(self, keyname):
        """
        Get a list of unique values for a given key in the OFX object.

        This method iterates over the transactions in the OFX object and adds the
        value of the given key to a set, effectively collecting all unique values
        for that key.

        Args:
            keyname (str): The key to search for in the OFX object.

        Returns:
            list: A list of unique values for the given key in the OFX object.
        """
        unique_values = set()

        for transaction in self.ofx.bankmsgsrsv1.stmttrnrs.stmtrs.banktranlist:
            if hasattr(transaction, keyname):
                unique_values.add(getattr(transaction, keyname))

        return list(unique_values)

#-----------------------------------------------------------------------------
if __name__ == "__main__":
    #ofx_file = sys.argv[1]
    #csv_file = sys.argv[2]
    #ofx_file = 'test.ofx'
    ofx_file = 'raw/AllMACUAccounts_2022.ofx'
    ofx2ledger = OFX2Ledger(ofx_file)
    print(ofx2ledger.get_unique('ACCTID'))
