#!/usr/bin/env python3

# https://financialdataexchange.org/common/Uploaded%20files/OFX%20files/OFX%20Banking%20Specification%20v2.3.pdf
# 11.13.1.1.2 Bank Message Set Response Messages
# 11.13.1     Example: Statement Download

import sys
import csv
from ofxtools.Parser import OFXTree
from pprint import pprint

#--------------------------------------------------------------------------
def ewarn(*args):
    for message in args:
        print(message, file=sys.stderr)

#--------------------------------------------------------------------------
def eexit(*args, exit_code=1):
    if args:
        ewarn(*args)
    sys.exit(exit_code)

#--------------------------------------------------------------------------
def parse_file(ofx_file):
    # Parse the OFX file
    parser = OFXTree()
    parser.parse(ofx_file)

    # Convert the tree to an OFX object
    return parser.convert()

#--------------------------------------------------------------------------
def build_array(ofx_file):
    ofx = parse_file(ofx_file)

    if not hasattr(ofx, 'bankmsgsrsv1'):
        eexit("DEBUG: Expected to find BANKMSGSRSV1 but it's not there.",
              vars(ofx))

    if not ofx.bankmsgsrsv1.stmttrnrs:
        eexit("DEBUG: Expected to find at least one element in STMTTRNRS but it's not there.",
              vars(ofx))

    for response in ofx.bankmsgsrsv1.stmttrnrs:
        # Check if the STMTTRNRS object exists before extracting it
        if hasattr(response, 'stmttrnrs'):
            #stmttrnrs = response.stmttrnrs
            print(f">{response.stmtrs.bankacctfrom.acctid}")

        else:
            print("Debug: response object does not have a 'stmttrnrs' attribute. Its current state is:", file=sys.stderr)
            pprint(vars(response), stream=sys.stderr)
            continue

#    # Extract the field names and values
#    fieldnames = []
#    transactions = []
#
#    # Extract the BANKMSGSRSV1 object
#    bankmsgs = ofx.bankmsgsrsv1
#
#
#    # Extract the STMTRS object
#    stmtrs = stmttrnrs.stmtrs
#
#    # Extract the BANKTRANLIST object
#    banktranlist = stmtrs.banktranlist
#
#    # Iterate over the transactions
#    for transaction in banktranlist.stmttrn:
#        fieldnames.extend(transaction.__dict__.keys())
#        transactions.append(transaction.__dict__)
#
#    # Remove duplicates from fieldnames
#    fieldnames = list(set(fieldnames))
#
#    return fieldnames, transactions

#--------------------------------------------------------------------------
def write_to_csv(fieldnames, transactions, csv_file):
    with open(csv_file, 'w', newline='') as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        for transaction in transactions:
            writer.writerow(transaction)

if __name__ == "__main__":
    #ofx_file = sys.argv[1]
    #csv_file = sys.argv[2]
    #ofx_file = 'test.ofx'
    ofx_file = 'raw/AllMACUAccounts_2022.ofx'
    csv_file = 'transacts.csv'
    fieldnames, transactions = build_array(ofx_file)
    write_to_csv(fieldnames, transactions, csv_file)
